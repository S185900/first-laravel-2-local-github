# version: '3.8' バージョンはコメントアウトしておくと、エラーを回避できる

services:
    nginx:
        image: nginx:1.21.1
        # ホストのポート80をコンテナのポート80にマッピング
        ports:
            - "80:80"
        # ローカルのdefault.confとsrcをコンテナにマウント
        volumes:
            - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
            - ./src:/var/www/
        # PHPコンテナが起動してからNginxを起動する
        depends_on:
            - php

    php:
        # Dockerfileのあるディレクトリを指定(docker/php/Dockerfile)
        build: ./docker/php
        volumes:
            - ./src:/var/www/

    mysql:
        image: mysql:8.0.26
        platform: linux/amd64 # Dockerが互換性を調整するため追加
        # environmentは重要
        environment:
            MYSQL_ROOT_PASSWORD: root # 管理者パスワードの設定
            MYSQL_DATABASE: laravel_db # データベースの初期設定/データベース名の設定
            MYSQL_USER: laravel_user # 一般ユーザの初期設定/ユーザー名の設定
            MYSQL_PASSWORD: laravel_pass # 一般ユーザのパスワードの設定
        command:
            mysqld --default-authentication-plugin=mysql_native_password
        # ローカルのmysqlとmy.cnfをコンテナにマウント
        volumes:
            - ./docker/mysql/data:/var/lib/mysql
            - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf

    phpmyadmin: # PHPMyAdminの設定
        image: phpmyadmin/phpmyadmin
        platform: linux/amd64 # Dockerが互換性を調整するため追加
        # mysqlで作成するデータベースのユーザ名とパスワード
        environment:
            - PMA_ARBITRARY=1
            - PMA_HOST=mysql
            - PMA_USER=laravel_user
            - PMA_PASSWORD=laravel_pass
        # docker-compose 起動時にmysqlが実行された後に実行される
        depends_on:
            - mysql
        # ホスト側で 8080番、コンテナ側で 80番のポート番号を指定している
        # ビルド後に、http://localhost:8080/ でアクセス可能
        ports:
            - 8080:80

